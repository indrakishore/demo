Variable scope overview:

Global scope: Variables declared outside any block or function have a global scope and are accessible throughout the entire script.

Block scope: Variables declared within curly braces {} have block scope, accessible only within that block.

Function scope: Variables declared within a function have function scope, limited to that function's block.

Variable declaration and initialization:

Used var, let, and const to declare and initialize variables in different scopes: global, block, and function.

Demonstrated the behavior of these variables in respective scopes by accessing them outside their defined scope.

Output and scope analysis:

Global variables were accessible everywhere in the script.

Block-scoped variables (inside {}) had limited accessibility, resulting in ReferenceErrors when accessed outside their blocks.

Function-scoped variables (inside a function) also led to ReferenceErrors when accessed outside the function.



Using conditional statements and control flow, you can direct how a program behaves based on different situations or criteria, allowing for decision-making and defining specific pathways within the code.
Variables declaration:

Set up a HTML file linked to a JavaScript file in a folder named "controlFlow."
Create variables for userRole, accessLevel, isLoggedIn, userMessage, userType, userCategory, isAuthenticated, and authenticationStatus.
Implementing control flow:

Use if…else statements to assign access levels based on user roles.
Implement nested if…else statements to customize messages based on login status and user roles.
Utilize a switch statement to categorize users based on their type.
Ternary operator for authentication:

Use a ternary operator to determine the authentication status.
Depending on the value of isAuthenticated, set the authenticationStatus as "Authenticated" or "Not authenticated."


Closure and Hoisting
Setting Up the Environment: HTML structure with a header displaying the account holder's name (Peter Parker) and a follower count displayed as "0" within a span element.

Defining Variables and Functions: A button triggers the "increaseCount()" function, incrementing the follower count when clicked, updating the displayed count dynamically, and triggering alerts at 10 and 20 follower milestones.

Displaying Incremental Result: JavaScript functions manage the count incrementation, display of follower count on the HTML page, and the conditional display of 